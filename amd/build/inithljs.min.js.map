{"version":3,"file":"inithljs.min.js","sources":["../src/inithljs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Initialise and highlight code snippets.\n *\n * @module    mod_snippet/hljs\n * @copyright 2023 Nicolas Dalpe <ndalpe@gmail.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Import the highlight.js library.\nimport 'core/copy_to_clipboard';\nimport hljs from 'mod_snippet/highlight';\nimport Templates from 'core/templates';\n\n/**\n * Initialise and highlight.js and load the language syntax module.\n *\n * @param {array} languages The languages used in the snip or list of snips.\n */\nexport const init = (languages) => {\n    for (const language of languages) {\n\n        // Load snip's language syntax module.\n        import(`mod_snippet/languages/${language}`).then((liblanguage) => {\n\n            // Register the snip's language syntax module.\n            hljs.registerLanguage(language, liblanguage);\n\n            // Highlight all code blocks with the loaded language.\n            document.querySelectorAll(`pre code.language-${language}`).forEach((el) => {\n                hljs.highlightElement(el);\n                addClipboardButton(el);\n            });\n        });\n    }\n};\n\n/**\n * Add a copy to clipboard button to a snip.\n *\n * @param {el} Element to attach the button to.\n */\nconst addClipboardButton = (el) => {\n    // Get the parent pre element id and extract the snip id from its id.\n    const parentsnipid = el.parentNode.id;\n    const snipid = parseInt(parentsnipid.split('-')[1]);\n\n    const context = {\n        id: snipid\n    };\n\n\n    // This will call the function to load and render our template.\n    Templates.renderForPromise('mod_snippet/components/btn_copyto_clipboard', context)\n\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n            console.log(html);\n            // Here eventually I have my compiled template, and any javascript that it generated.\n            // The templates object has append, prepend and replace functions.\n            Templates.appendNodeContents('#' + parentsnipid + ' > code', html, js);\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => displayException(error));\n};"],"names":["languages","language","then","liblanguage","registerLanguage","document","querySelectorAll","forEach","el","highlightElement","addClipboardButton","parentsnipid","parentNode","id","context","parseInt","split","renderForPromise","_ref","html","js","console","log","appendNodeContents","catch","error","displayException"],"mappings":"okBAiCqBA,gBACZ,MAAMC,YAAYD,2PAGaC,qUAAAA,qGAAAA,aAAYC,MAAMC,iCAGzCC,iBAAiBH,SAAUE,aAGhCE,SAASC,6CAAsCL,WAAYM,SAASC,wBAC3DC,iBAAiBD,IACtBE,mBAAmBF,iBAW7BE,mBAAsBF,WAElBG,aAAeH,GAAGI,WAAWC,GAG7BC,QAAU,CACZD,GAHWE,SAASJ,aAAaK,MAAM,KAAK,wBAQtCC,iBAAiB,8CAA+CH,SAGzEZ,MAAKgB,WAACC,KAAEA,KAAFC,GAAQA,SACPC,QAAQC,IAAIH,yBAGFI,mBAAmB,IAAMZ,aAAe,UAAWQ,KAAMC,OAItEI,OAAOC,OAAUC,iBAAiBD"}